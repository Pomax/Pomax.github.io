<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<atom:link href="http://pomax.github.io/gh-weblog-2/rss.xml" rel="self" type="application/rss+xml" />
<title>Pomax.github.io</title>
<description>My blog on github [Mozilla posts only]</description>
<link>http://pomax.github.io</link>
<lastBuildDate>Tue, 19 Jan 2016 19:59:36 GMT</lastBuildDate>
<pubDate>Tue, 19 Jan 2016 19:59:36 GMT</pubDate>
<ttl>1440</ttl>
<item>
<title> Developing Open Source Software</title>
<description>&lt;p&gt;I want to take a little bit of time to explain how I work on Open Source, both privately and as part of my job as a Software Engineer at the Mozilla Foundation. Not because it's wildly different from how everyone else does it, but because it's probably the same as how the vast majority works on Open Source, which means very few people bother to explain the processes involved.&lt;/p&gt;
&lt;p&gt;There are two different kinds of "working on open source", depending on whether the code is a collaboration or just a simple one-person project, so let's look at both.&lt;/p&gt;
&lt;h2 id="-i-m-making-a-thing-"&gt;&lt;em&gt;"I'm making a thing!"&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;If you're making a thing, the basic rule is "anything goes": you're the only one you're inconveniencing by taking shortcuts, and often that's fine. However, if you're starting a project that you think might at some point gain contributors (say, you're making a thing that you hope becomes popular), there are a few things you can do to make sure that when your project does go from "one dev" to "a team", the transition is smooth:&lt;/p&gt;
&lt;h3 id="file-issues-before-fixing-them"&gt;File issues before fixing them&lt;/h3&gt;
&lt;p&gt;Not only is it a handy If you file the issues you know about as a kind of to-do list to walk through, but you might be surprised to find someone actually fixing an issue you filed before you get to it, once your project gets even a little exposure.&lt;/p&gt;
&lt;h3 id="work-in-branches-"&gt;Work in branches.&lt;/h3&gt;
&lt;p&gt;There will be an initial "I just need to get this code written" period where you're pushing to master: awesome, go for it. However, once you reach what might turn into a 1.0 with a bit more code, start getting in the habit of treating your master branch as off limits, and working in branches that you merge into master instead. This makes it easier for contributors to do the same.&lt;/p&gt;
&lt;h3 id="document-document-document-"&gt;Document, document, document.&lt;/h3&gt;
&lt;p&gt;You're not actually working on your code alone: you're collaborating with your future self, and future self has no idea what you're thinking right now while you're writing your code: document your choices, explain complex bits of code and whatever you do, explain hacks and bodges! Clever as they might be today, 2 months from now they might be so clever you actually need to spend your own time on them to figure out why they even work the way they do. Help future-you out: write documentation.&lt;/p&gt;
&lt;p&gt;And that doesn't need to be wikis or long readmes, it can just be code comments: as long as knowledge you need to understand changes you're making right now isn't lost, you're being awesome. &lt;/p&gt;
&lt;h2 id="-we-re-making-a-thing-"&gt;&lt;em&gt;We're making a thing.&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;While you're fairly free to do what you want to do on your own, for collaborative projects, there is really only one way to work in a way that's not going to break down. For anything that needs to be done, follow the three F's:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;File it&lt;/strong&gt;,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fix it&lt;/strong&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Follow up&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="1-file-it-"&gt;1) File it!&lt;/h3&gt;
&lt;p&gt;If you're going to work on something, make sure it's a known issue. Code changes without an issue that explain why the changes were necessary in the first place are mystery changes, and mysteries in a collaborative effort are bad.&lt;/p&gt;
&lt;p&gt;However, that doesn't mean the changes aren't necessary, so: always, &lt;strong&gt;always&lt;/strong&gt; make sure there's a ticket, or issue, or bug report, associated with the changes you're making, so that your code changes can say "this fixes/addresses ticket/issue/bug so-and-so". Sometimes those tickets/issues/bug reports already exist and you can simply refer to them, but sometimes they don't: &lt;strong&gt;file it before submitting your code changes&lt;/strong&gt;, so that you can refer to that newly filed ticket.&lt;/p&gt;
&lt;p&gt;It's okay to already have the code in place that addresses an issue you haven't filed yet, just make sure that by the time you submit your changes, there is one.&lt;/p&gt;
&lt;p&gt;Collaboration relies on communication. If people change the code without tying it to the list of "these are issues we need to address", then there is no way to track changes in the codebase. Generating a changelog based on closed issues is often quite easy, but if there are no issues that got closed/resolved due to changes getting accepted into the code base, then you're asking people to work on code that potentially no one can explain (because the person who contributed it may have left already. If you can even track who submitted the change at all).&lt;/p&gt;
&lt;p&gt;Also, &lt;strong&gt;file individual issues&lt;/strong&gt;. The best code bases are ones where each thing that needs to be done is filed separately, and fixed separately, because it's much easier to work on as a team (small tasks make for rapid progress), and it makes it easy to track complex tasks: if you need to implement a user profile system, and that requires a login system, a user database, and user facing UI, then if someone files "implement a user profile system", the very first thing that should happen is chopping that issue up into several smaller issues. It might sound anal, but you're working in a team, and many hands make light work: the smaller you can chop up an issue, the easier it becomes to resolve the bigger task.&lt;/p&gt;
&lt;h3 id="2-fix-it-"&gt;2) Fix it...&lt;/h3&gt;
&lt;p&gt;Crazy as it may sound: never start fixing things by writing code. First ask: "Has someone else already written the code and can I just plug that in?". If they have: just use that. You're still probably going to need a little bit of code to do the "plugging it in" part, but little bits of code are easy to maintain, and it means you're not responsible for maintaining lots of code.&lt;/p&gt;
&lt;p&gt;Conversely, if there is no code out there that already does what you need to do, ask yourself: "Can I write this as a standalone utility, and then plug &lt;em&gt;that&lt;/em&gt; in?". Because if you can, that's worth doing. If you need to solve a problem and there's no solution out there, you're probably solving a problem that other people are also having: it's worth making that solution available.&lt;/p&gt;
&lt;p&gt;Of course, there will be plenty of issues that can only be addressed by writing real, project-relevant, code, and for those occasions there are three things to keep in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;commit early&lt;/strong&gt;,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;commit often&lt;/strong&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;communicate with your team&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="commit-early"&gt;Commit early&lt;/h4&gt;
&lt;p&gt;If you're working on code changes, push up your changes as soon as you have "something" going. &lt;strong&gt;Especially if it's not done yet&lt;/strong&gt;. Don't wait until "it's done", because you have no idea when that will be: form a commit and push it up once you have the basic stubs in place, for instance, before you start working out the code in full.&lt;/p&gt;
&lt;p&gt;This lets other people that work with you see what you're working on, and lets them catch things early that would cost a lot of time to fix later on. &lt;/p&gt;
&lt;h4 id="commit-often"&gt;Commit often&lt;/h4&gt;
&lt;p&gt;Some code changes are one liners or a simple function renaming, but many are not: don't wait until you're done to push up your changes. Any time you write some code and test it, and it passes, that's a moment to form a commit, push it up, and then keep going.&lt;/p&gt;
&lt;p&gt;If a computer dies (and if you work in a team, that will happen surprisingly often) or someone unexpectedly becomes unavailable for a few days (again, happens more often than you might think), there is no loss of work &lt;strong&gt;for the team&lt;/strong&gt;. The team as a whole can pick up where you as a person left off in these circumstances, and if you don't commit often, they'll potentially have to reinvent changes you had already written.&lt;/p&gt;
&lt;p&gt;It's also much easier to rebase your code if they're small incremental commits when the master code base changes. For instance, a dependency got updated, which caused some functions to use that dependency's new API calls; that is much easier to deal with if it just requires you to change the small commit that touched a file for which that was the case than if you have one massive commit.&lt;/p&gt;
&lt;p&gt;Additionally, the more often you commit, the earlier possible bugs can be found; the earlier bugs are found, the less work it is to fix them, because not a lot of things will trigger them yet.&lt;/p&gt;
&lt;h4 id="communicate-with-your-team"&gt;Communicate with your team&lt;/h4&gt;
&lt;p&gt;If you're working on anything even moderately sized: start talking about your code with team members early. Don't ask them to review only all the way at the end if your changes involve new code or new approaches; run it by someone so that even if you're the only one that'll end up writing code, you're &lt;em&gt;not&lt;/em&gt; the only one who knows what decisions were made while the code was being written.&lt;/p&gt;
&lt;p&gt;Also, remember to ask questions in the open. You might end up with blocking questions that need an answer before you can continue your work, and while it's tempting to try to find someone to get it answered in real-time, &lt;strong&gt;file it first&lt;/strong&gt;, so that the entire team can see it. Then you can find someone to real-time answer it and capture the answer in the filed issue, so that the entire team can be aware of the question having come up, and the answer that was agreed on.&lt;/p&gt;
&lt;h4 id="corrolary-know-when-to-split-your-work-"&gt;Corrolary: know when to split your work.&lt;/h4&gt;
&lt;p&gt;Some issues reveal problems in other parts of the project, and you might be tempted to fix those as part of your changes. I know it's tempting, but &lt;strong&gt;don't&lt;/strong&gt;, because you're not actually helping the team that way. Instead: file it, fix it, and follow up.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Step away from the current code when you reach a good break point (and that could be immediately, if the thing you found is blocking you),&lt;/li&gt;
&lt;li&gt;File the issue as a new issue,&lt;/li&gt;
&lt;li&gt;If it's blocking you:&lt;ol&gt;
&lt;li&gt;Fix it first,&lt;/li&gt;
&lt;li&gt;Schedule follow up&lt;/li&gt;
&lt;li&gt;Rebase your code on the fix, so you're unblocked&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Now you can come back to the code you were already working on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You'll note that in step 3 the advice is to work on it immediately only if it's actually blocking you: this is important. You're working in a team, and someone else might have a free moment to work on the thing you just discovered, while you keep working on your own changes.&lt;/p&gt;
&lt;h3 id="3-run-through-the-follow-up-"&gt;3) Run through the follow-up.&lt;/h3&gt;
&lt;p&gt;You've worked on code changes, you committed early, and often, and your "patch" now consists of 12 commits and two observations about future work: it's time for follow-up.&lt;/p&gt;
&lt;h4 id="clean-up-your-code"&gt;Clean up your code&lt;/h4&gt;
&lt;p&gt;If your changes work using 12 commits, then your changes work, and it's time to squash those 12 commits into a single commit so it can be landed into the codebase without all the steps that got you there. Even if there is no requirement to squash your code before landing, changelog generation, revision control, and rollbacks are all much nicer if patches land as single commits.&lt;/p&gt;
&lt;p&gt;Also, if there are any unnecessary comments or logs/prints in your code, now's the time to get rid of those, and of course, now is also the time to make sure that any missing documentation either gets added, or gets filed as "document XYZ", to be worked on immediately after landing your changes, rather than anything else, which brings us to...&lt;/p&gt;
&lt;h4 id="file-anything-you-found-but-didn-t-fix-"&gt;File anything you found, but didn't fix.&lt;/h4&gt;
&lt;p&gt;While you were working on your changes, you may have thought of things that might need addressing outside of the changes you made: &lt;strong&gt;file those&lt;/strong&gt;. It is important to capture those observations in a way that the entire team can see them.&lt;/p&gt;
&lt;h4 id="talk-to-your-team"&gt;Talk to your team&lt;/h4&gt;
&lt;p&gt;Finally, follow up with people, too. Let the people who need to know about your changes know about your changes - ask them to review you patch, explain your work to them where needed, if there is testing involved, make sure they understand what needs to be done, and generally make sure at least two people agree these changes are good to go (including yourself). That communication doesn't need to happen in person, the issue tracker you use might facilitate this kind of follow up, but always collaborate on the landing, even if the code works. There might be last minute changes or decisions that you were not aware of that someone else might: good to discover that before the changes are merged in!&lt;/p&gt;
&lt;h2 id="that-s-pretty-much-it"&gt;That's pretty much it&lt;/h2&gt;
&lt;p&gt;There's a fair amount of finer detail and variation that fits into the "file it, fix it, follow up" process, but stick to that order and you're on the path of a sustainable development cycle.&lt;/p&gt;
&lt;p&gt;Most of this is probably obvious to most people, but that just makes it all the more important to get it written down, because someone's going to be a bit bewildered and they'll need a blog post to get them on track =)&lt;/p&gt;
</description>
<category>Open source</category>
<category>Development</category>
<category>Process</category>
<category>Mozilla</category>
<link>http://pomax.github.io/#gh-weblog-1450207129290</link>
<guid>http://pomax.github.io/#gh-weblog-1450207129290</guid>
<pubDate>Tue, 15 Dec 2015 19:18:49 GMT</pubDate>
</item>
<item>
<title> "Tell me what some of your strengths are..."</title>
<description>&lt;p&gt;Last week I attended a work seminar on discovering your personal strengths and how to identify and curtail stress behaviour. Let me just give the summary first:&lt;/p&gt;
&lt;p&gt;Yes, it was incredibly useful, and I'd urge you to do something similar if you haven't yet.&lt;/p&gt;
&lt;h2 id="know-yourself"&gt;Know yourself&lt;/h2&gt;
&lt;p&gt;The main point is to learn what you're good at, so that you can focus your efforts into further developing skills that fall in categories related to where you are at your strongest.&lt;/p&gt;
&lt;p&gt;Yes, you might like doing a million different things, but if you really want to develop yourself, find out which few you're really going to be good at, and exploit that. Not necessarily give up on the others, just make sure you &lt;em&gt;focus&lt;/em&gt; on the ones that really come to you naturally.&lt;/p&gt;
&lt;p&gt;At the same time, know how you react when you get driven into a corner. Some of us are naturals at personal development, most of us are not, and the great thing about attending a seminar like this is that you get exposed to some of the psychology behind a few major generic personalities. For instance, here's my list of "strengths", spread over two categories:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strategic thinking:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Input: "you crave to know more, and like to collect information and archive it". &lt;/li&gt;
&lt;li&gt;Learner: "you have a great desire to learn and continuously improve. In particular, learning, rather than the outcome, excites you".&lt;/li&gt;
&lt;li&gt;Intellection: "you are characterized by your intellectual activity. you're introspective, and appreciate intellectual discussions". &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Relationship building:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Relator: "you enjoy building close relationships, and find deep satisfaction in working hard with friends to achieve goals".&lt;/li&gt;
&lt;li&gt;Connectedness: "you think all things are connected and don't believe in coincidence. almost every event has a reason".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And here's the thing: based on their simple definitions, not all of these strengths make a lot of sense. Thankfully, there are individualised descriptions of what each of these strengths mean, and so things start to make a lot more sense, and rather than "fortune cookie" information, one can actually learn something meaningful.&lt;/p&gt;
&lt;h2 id="meaningful-descriptors"&gt;Meaningful descriptors&lt;/h2&gt;
&lt;p&gt;The seminar I attended used the &lt;a href="http://strengths.gallup.com/110440/About-StrengthsFinder-20.aspx"&gt;Clifton Strengthsfinder 2.0&lt;/a&gt; test, based on data by &lt;a href="https://en.wikipedia.org/wiki/Gallup_%28company%29"&gt;Gallup&lt;/a&gt; gathered over quite a few years from over 100,000 participants. I like science, and if this data is going to say something "about me", then that's at least a decent sample size.&lt;/p&gt;
&lt;p&gt;No, of course the predictions won't be perfect, but it'll be good enough to act as starting point to acknowledge your own strengths and personality type, and exploit the strengths while working on minimizing the reactionary tendencies. So: who am I?&lt;/p&gt;
&lt;h3 id="strategic-thinking-input"&gt;Strategic thinking: Input&lt;/h3&gt;
&lt;p&gt;I like information. I like learning new things, and learning &lt;em&gt;about&lt;/em&gt; new things, but I don't particularly care about archiving, because I trust my brain to do that for me without having to bother with it. So what does "input" really mean? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Chances are good that you can simplify the most complex, convoluted, or intricate procedure. People usually rely on you to offer clear and easy-to-comprehend explanations. Driven by your talents, you may notice that certain people turn to you for guidance. Maybe your willingness to share the knowledge you have gained over the years partially explains the fondness they have for you. Some individuals might have benefited from what you have read, observed, or experienced. It’s very likely that you frequently use academic-sounding words to talk about your ideas or areas of expertise. You intentionally spend time broadening your vocabulary by looking up words in the dictionary and committing their meanings to memory. By nature, you occasionally combine your fascination for reading with your ability to figure out what sets specific individuals apart from everyone else. You might discover the things that interest someone. Then you may read more about these topics. Perhaps you aim to collect insights that inspire the person to take advantage of his or her one-of-akind talents, knowledge, and/or skills. Because of your strengths, you might gather ideas and information from reading publications that keep you up to date on particular types of current events. What you choose to peruse — that is, examine studiously — may reflect some of your personal or professional interests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That makes a bit more sense than the generic summary. It also offers far more footholds when it comes to aspects of this strength that can be relied or built on.&lt;/p&gt;
&lt;h3 id="strategic-thinking-learner"&gt;Strategic thinking: Learner&lt;/h3&gt;
&lt;p&gt;I won't lie: I liked seeing this strength. I do very much enjoy learning new things, and seeing this as one of my strengths was basically one of those "yep, I knew it" moments. However, "I like to learn new things" is a pretty generic strength, so seeing the much bigger analysis was quite useful:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Instinctively, you endorse the importance of acquiring additional knowledge and gaining new skills. You regard education as an ongoing activity. It’s very likely that you occasionally collect bits and pieces of information. At the time, the value of this material may not be apparent. In specific cases, you have found it useful to turn to some specialists for help. Perhaps these individuals can provide you with enough direction so you can ask some questions, render a few decisions, or try to map courses of action without upsetting anyone in the process. You avoid angering certain people by consulting with them before doing anything. Driven by your talents, you may long to gather certain types of information about specific individuals. Perhaps your “need to know” is rarely satisfied. The more facts you gather, the easier it might be for you to understand someone’s strengths, limitations, interests, likes, dislikes, or goals. You might be inclined to study human beings one by one. To some degree, your ongoing observations of selected individuals provide you with interesting insights into human nature. By nature, you intentionally include uncommon, highly technical, or sophisticated words in your vocabulary. You realize that language is a form of knowledge that gives you an upper hand — that is, controlling power — in conversations, debates, or discussions. It quickly establishes you as an authority figure in listeners’ minds. First, you capture their attention. Then you take charge of events, projects, meetings, or problem solving. Chances are good that you may be a solo performer. You might be determined to broaden your knowledge or acquire new skills. Perhaps you are drawn to the process of education.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And there you have it. Pretty much all of this rings true. And yes, on their own each of these phrases sound like a horoscope, but it's not the individual phrases that form the strength, it's the collection of all of them, applicable to this person.&lt;/p&gt;
&lt;p&gt;I'm okay with this.&lt;/p&gt;
&lt;h3 id="strategic-thinking-intellection"&gt;Strategic thinking: Intellection&lt;/h3&gt;
&lt;p&gt;This strength feels a little weird, because it's hard to go "why yes, I am intellectual" and not come off smug. The main problem is that "intellectual" and "smart" are often treated as the same thing, and in this particular case, they're not. I could give lots of examples, but instead it just makes far more sense to let the snippets do the talking:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Chances are good that you sometimes wish you could switch off your active brain. Even so, you may enjoy your time alone as you ponder ideas. Perhaps you want to test whether they make sense. Because of your strengths, you may be selective about the types of books or publications you read. They might contain information or tips that you can share with individuals you are training. Perhaps imparting knowledge, talking about your experiences, or passing along your skills gives you a certain degree of satisfaction. By nature, you may find it easier to befriend certain types of people if they tell you what they want to accomplish. Knowing that much, you might read some books, journals, newspapers, correspondence, or Internet sites to broaden your knowledge about their interests. When you can share information that helps people move closer to their goals, perhaps you can begin to understand each other a little better. It’s very likely that you eagerly welcome opportunities to think out loud about ideas, theories, or philosophies. You derive pleasure from conversations that force you to ponder matters that exist only in the realm of thought, not in reality. Driven by your talents, you sometimes delight in having your very own tasks to perform. Perhaps you like to solo because it gives you quiet time to reflect on what you think or feel. Maybe you consider what you have done, are doing, or can do better.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="relationship-building-relator"&gt;Relationship building: Relator&lt;/h3&gt;
&lt;p&gt;This one confused me, because while I like deep relationships, I'm perfectly fine with shallow ones, too. The generic description didn't seem to match at all, but the detailed one certainly did:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By nature, you are naturally open and honest about who you are, what you have done, what you can do, and what you cannot do. Your straightforward explanations and stories help listeners see you as you see yourself. You reveal your strengths and limitations. You are forthright and plainspoken. People generally seek your company and want to work with you. Many are impelled to move into action by your words and examples. It’s very likely that you periodically are sought out by people whom you have befriended. They may trust you when you have taken time to know them individually. This may partially explain why certain people come back again and again for ideas or suggestions. They might realize you try to tailor your words of wisdom to fit their unique situations, needs, strengths, limitations, goals, or personalities. Driven by your talents, you may be convinced that you are measuring up to your potential. Perhaps you know when you are doing your best work or earning the highest grades you possibly can. Chances are good that you occasionally tell yourself that you are an effective mentor or trainer. Perhaps individuals benefit from the investment you make in them. Because of your strengths, you might do your best training after you become well-acquainted with someone. Perhaps you want to discover each individual’s unique talents, work style, goals, motivations, or interests. Maybe these insights tell you what suggestions to make or what tips to offer during coaching sessions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In fact, this very blog post is essentially proof of how true this assessment is: I'm right now telling you about something that a lot of people would consider pretty personal, and that last bit pretty much underlines how I even started this post: learning about different personalities and strengths, and how to work with those in oneself and other people, is fascinating, as well as functionally useful.&lt;/p&gt;
&lt;h3 id="relationship-building-connectedness"&gt;Relationship Building: Connectedness&lt;/h3&gt;
&lt;p&gt;And this one was a genuine surprise, at least based on the generic descriptions. It sounds very much like a "faith in the oneness of all things", which really doesn't describe my take on matters at all. I believe in a quantum universe (at least, for now. Physics is still developing), and while I don't believe in "coincidence", I also don't analyse things from just one perspective, and so the notion of "a coincidence" doesn't even make sense to me. There are so many different perspectives on single events that are all simultaneously in effect that even if you'd pretend there was a coincidence in one of those, that same coincidence would vanish in others. This strength felt like nonsense. But then this more personalised description actually made it make sense:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By nature, you may get to know people individually in your quest to gain wisdom. Discovering the qualities that distinguish someone from everyone else might be an essential aspect of your search for truth. Driven by your talents, you might be fascinated with certain ideas, policies, or philosophies that affect human beings around the world. Because of your strengths, you may be able to accept unpredictable events in your life on the basis of sheer faith. Perhaps you sense there is a force greater than you at work in the world. Occasionally you can live with not knowing the exact reason why something good or bad happened to you and not to someone else. Chances are good that you sometimes think like a detective. You might search for and find obvious and not-so-obvious clues. You might determine which ones link together. Now and then, you notice gaps in your investigation. Some of these cannot be explained using reason alone. You may feel comfortable accepting what is unknown and unknowable. Why? To some extent, you trust that everything, everyone, and every action is somehow intertwined. Instinctively, you may be determined to make the acquaintance of certain individuals you identify as seekers of truth. Perhaps you are attracted to people who ponder philosophical questions such as “What is the meaning of life?” or “What is beauty?” or “What constitutes wisdom?” or “Why do bad things happen to good people?” or “Why should ordinary people like me even ask these kinds of questions?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Reading this, it basically reads as a description of being a university student who's taking a masters in A.I. which happens to be exactly who I was, and whose intellectual inheritance I still live today.&lt;/p&gt;
&lt;h2 id="weaknesses-the-reactionary-side-of-things"&gt;Weaknesses: the reactionary side of things&lt;/h2&gt;
&lt;p&gt;For the purposes of the seminar, when people get put on the spot, and stressed to a breaking point, the behaviour they might display is broadly categorised in three possible ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Complying: giving away the control over the situation and taking it from there.&lt;/li&gt;
&lt;li&gt;Protecting: walking away from the situation to protect oneself.&lt;/li&gt;
&lt;li&gt;Controlling: going into "getting shit done" mode and steamrolling anyone who doesn't do so as well.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Those are just words with short descriptors, and people often enough display more than one type of behaviour, depending on the situation. However, I know myself reasonably well in this respect, and I'm virtually always protecting:&lt;/p&gt;
&lt;p&gt;I will turn off any emotional attachment, and deal with problems in what is best described as "the vulcan way". I've certainly been abrasively critical in the past often enough for it to rub people the wrong way, and I've been trying to get better at &lt;em&gt;not&lt;/em&gt; being abrasive, but a seminar like this is a great supplement to introspection: it puts what you sort of already thought into a wider perspective, and most importantly gives you insight into how the way you behave under stress will affect others who are also operating under stress.&lt;/p&gt;
&lt;p&gt;If I'm stressed, and the person I'm dealing with is stressed as well (and for whatever reason. Not strictly work), then if they're of a complying nature, we're going to have problems. Because they'll want a resolution, and I'll be offering criticism without solutions. That won't get us anywhere, except "more stuck". Similarly, if they're controlling, they'll be coming up with what solution works, and I'll just shoot it right back down. And that's just the "practical" result, emotionally there's a lot of potential for resentment both ways, and things can get very nasty. &lt;/p&gt;
&lt;h2 id="-so-tell-us-some-of-your-strengths-"&gt;"So tell us some of your strengths..."&lt;/h2&gt;
&lt;p&gt;You know that question you get at job interviews, where they want to know what your strengths and weaknesses are? This is what they're talking about. This is why I'd recommend everyone to take a seminar like this even if you're between jobs, or even if you've yet to start on your first one. There's "knowing what you're good at", and there's "knowing the strengths that you can build on and exploit", and they're two different things. The first most people develop naturally, by virtue of just doing what they do. The second, everyone can use some help with.&lt;/p&gt;
&lt;p&gt;It also lets you know what you're not. That sounds a little weird, because there's an infinite world of infinite possibilities out there, but there're broadly speaking four categories of personalities and strengths that you want as part of an effective team, and a team made entirely of "learners" isn't going to be very useful. Fun, probably, but not something that makes business sense.&lt;/p&gt;
&lt;p&gt;I fall in the strategic thinking and relationship building categories. That means that if I'm put on a team, my contribution plays off of having other people with different skills: people with execution skills to keep us on track and meet deadlines, and people with influence skills to get the most out of all the team members as well as facilitate negotiations within the team. Also, having a good spread of different "reactionary" behaviours helps to make sure no one "agrees to be stuck in a rut". Obviously no one likes being stuck, but if we're all the same kind of reactionaries, things go real bad, real fast. Much faster than if there's a good spread.  &lt;/p&gt;
&lt;h2 id="the-take-home-message"&gt;The take-home message&lt;/h2&gt;
&lt;p&gt;For me, the take-home message from this seminar was that it's really useful to do a thing like this at least once, even if you don't have a job right now, or you think you know yourself: if you've never done a personal strengths test before then chances are good you think you know what you're good at, and you might know what makes your temper-self so problematic, but there is great value in seeing things affirmed, or even being shown that there are parts of you that you never thought about, but ring very close to home: knowing yourself is not just something that helps you, it also helps others work, or just be, with you.&lt;/p&gt;
&lt;p&gt;I've been paired up with a "buddy", and we'll be holding each other accountable for the action plan we've drawn up on how to work on our weaknesses while also trying to focus on what we think are our most exploitable strengths. That probably sounds pretty lame, but at the same time, it's two people being committed to helping each other better themselves in a "no judging" relationship.  &lt;/p&gt;
&lt;p&gt;That's a pretty sweet outcome for a seminar called "Leadership Discovery".&lt;/p&gt;
</description>
<category>Mozilla</category>
<category>Leadership</category>
<category>Strengths</category>
<category>Introspection</category>
<link>http://pomax.github.io/#gh-weblog-1442796369118</link>
<guid>http://pomax.github.io/#gh-weblog-1442796369118</guid>
<pubDate>Mon, 21 Sep 2015 00:46:09 GMT</pubDate>
</item>
<item>
<title> Mozilla released a tool I am excited about.</title>
<description>&lt;p&gt;&lt;strong&gt;tl,dr&lt;/strong&gt;: you should have a look at &lt;a href="https://thimble.mozilla.org"&gt;https://thimble.mozilla.org&lt;/a&gt;, and if you think "this is just a fancy jsbin", challenge yourself to first read &lt;a href="http://blog.humphd.org/thimble-and-bramble"&gt;http://blog.humphd.org/thimble-and-bramble&lt;/a&gt;, which explains in detail how this is nothing like the other "single tool sites" we had on the web until pretty much this month.&lt;/p&gt;
&lt;p&gt;With that said, Thimble has a larger story here for me, personally, and I'd like to tell you that story so that you might understand why I am genuinely excited about this tool.&lt;/p&gt;
&lt;h2 id="once-upon-a-time-i-was-a-java-developer-"&gt;Once upon a time, I was a Java developer.&lt;/h2&gt;
&lt;p&gt;In a round-about way, my first "being a programmer" identity started in University. As a kid I'd written things in &lt;a href="https://en.wikipedia.org/wiki/BASIC"&gt;Basic&lt;/a&gt;  and &lt;a href="https://en.wikipedia.org/wiki/Turbo_Pascal"&gt;Turbo Pascal&lt;/a&gt;, but it wasn't until University that I was taught how to write structured programs that were more than utilities or silly time wasters.&lt;/p&gt;
&lt;p&gt;My first "real programming" kicked in about three years into &lt;a href="http://gss.uva.nl/future-msc-students/information-sciences/content26/artificial-intelligence.html"&gt;my AI education&lt;/a&gt;, when we were taking a 10 credit course that involved working on real world AI applications, I worked on a java code base for running distributed sensors backed by software agents that collaborated on performing Bayesian reasoning about signal sources. It was interesting, and after the course was done, landed me my first student job continuing my work on it. I ended up designing the code architecture, which ended up landing me my first permanent job, and ultimately gave me a subject I could do a master's thesis on (yes, that's the order things happened in).&lt;/p&gt;
&lt;p&gt;Of course I was still programming my own things in my spare time, as well as maintaining some websites (most notably &lt;a href="http://nihongoresources.com"&gt;nihongoresources.com&lt;/a&gt;) and when a friend mentioned doing some log visualisations using a language called &lt;a href="http://processing.org"&gt;"Processing"&lt;/a&gt; (which is the worst name for a programming language that wants to be searchable on the internet btw), I figured I'd have a look at what this mystery language was. &lt;/p&gt;
&lt;p&gt;As it turned out, I really liked Processing: it was &lt;em&gt;like&lt;/em&gt; Java, but with more freedom: a simpler modeling concept, "global unless you enclose it" functions, immediate execution of code in an imperfect editor (the "PDE") that was good enough to write quick, super sweet visual things. What's more there was even a JavaScript port available, for running your pde files online. Not as Java Applets, but just "as content". &lt;/p&gt;
&lt;p&gt;I ended up using Processing enough that I started running into annoying inconsistencies, or even bugs, in the &lt;a href="http://processingjs.org"&gt;Processing.js&lt;/a&gt; port, and being familiar with &lt;a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt; I jumped into the #processing.js channel on irc.mozilla.org and started complaining whenever things didn't work. In some places, that gets you kicked out of a channel, but in this one, a user called "&lt;a href="http://blog.humphd.org"&gt;humph&lt;/a&gt;" flipped my complaints around and threw them back at me as suggestions on how bugs could be filed, discussed, and fixed, instead. Without knowing it, I was getting a lesson in how to be a member of a community, and it worked.&lt;/p&gt;
&lt;p&gt;My life in today's definition of open source really started there: I started filing bugs, I knew JavaScript well enough to write code for web pages, but the kind of JS needed to write Processing.js was different, so I started learning more about JS as I tried to figure out problems in Processing.js, and at some point decided I knew enough that I could patch problems when I ran into them, with a community of devs that were kind enough to help me through the process of getting those patches submitted and landed into the main codebase. I ended up, I think it's fair to say, a major contributor to Processing.js, I moved from the Netherlands to Canada and went from Java developer to freelance web dev with a love of JS, and that's where this story turns into my involvement with Mozilla.&lt;/p&gt;
&lt;h2 id="-i-want-to-put-a-team-together-"&gt;"I want to put a team together."&lt;/h2&gt;
&lt;p&gt;I can't talk about humph, or really, Dave Humphrey, without a certain amount of adoration (and that is a well-considered word).&lt;/p&gt;
&lt;p&gt;If you haven't heard of Dave, he's a Professor of Open Source with ties to Mozilla, teaching at &lt;a href="http://cdot.senecacollege.ca"&gt;CDOT&lt;/a&gt;, at &lt;a href="http://www.senecacollege.ca"&gt;Seneca College&lt;/a&gt; in Toronto, and if you use Firefox, there's a good chance you've enjoyed his work. Dave, to me, is in the category of people who look at something and go "what, 2 years from now, is a thing I want to be taking for granted as available and usable, that isn't there right now". And then, unlike many people, doesn't just blog about it, but sits down and figures out how to make it happen. The part that earns him my adoration is that one of his approaches is to inspire others to do the work, because he has the singular ability to explain his ideas in ways that hold up, and make you excited about the prospect of them becoming reality. &lt;/p&gt;
&lt;p&gt;And he was thinking of "a thing" that would require getting some people together to make it happen. Needless to say, he had my attention.&lt;/p&gt;
&lt;p&gt;Dave had been linking me to &lt;a href="http://marksurman.commons.ca/blog"&gt;blog posts&lt;/a&gt; about making the web about "making" instead of "consuming" by a guy called "Mark Surman" every now and then, and while I'd never heard of the man, his posts made a lot of sense. It wasn't until Dave explain his idea to me that things clicked: &lt;a href="https://en.wikipedia.org/wiki/Mark_Surman"&gt;Mark Surman&lt;/a&gt; was the director of the &lt;a href="https://en.wikipedia.org/wiki/Mozilla_Foundation"&gt;Mozilla Foundation&lt;/a&gt;, and the idea that Dave had was a project to foster "making on the web" through a Mozilla Foundation initiative that you might have heard of.&lt;/p&gt;
&lt;p&gt;"&lt;a href="https://webmaker.org"&gt;Webmaker&lt;/a&gt;"&lt;/p&gt;
&lt;h2 id="in-2012-i-joined-a-tiny-mozilla-foundation-"&gt;In 2012, I joined a tiny Mozilla Foundation.&lt;/h2&gt;
&lt;p&gt;I applied to the Mozilla Foundation as a software engineer when it was pretty small. Certainly not "5 people and a goat" levels of small, but when I joined, &lt;a href="http://creativecommons.org/staff/ryan"&gt;Ryan Merkley&lt;/a&gt; was still with the foundation with the explicit goal of growing it to self-sustaining size, and while I had initially expected to work on "Popcorn Maker", an online video mashup/remixing tool spearheaded by the fascinating &lt;a href="http://www.etherworks.ca"&gt;Brett Gaylor&lt;/a&gt; (from &lt;a href="http://donottrack.us"&gt;Do Not Track&lt;/a&gt; fame), I instead ended up working on a project that was about letting people write HTML in a friendly way, to allow them to learn HTML while also making things they wanted to make on the web.&lt;/p&gt;
&lt;p&gt;For quite a few months there was no name, and initially the "webmaker" name applied only to this particular tool, but as we folded more tools into the offering (popcorn maker and the "x-ray goggles", most notably), the overarching program became "Webmaker", and the tool that I was involved with became "Thimble". It was an interesting thing to work on: I learned a ton about patterns and antipatterns in the JavaScript world, and despite the tool being a single page editor, people responded positively. Thimble empowered people on the web in a way that they hadn't been until then, and that made it really important.&lt;/p&gt;
&lt;p&gt;But, as a developer, I wouldn't use it myself.&lt;/p&gt;
&lt;p&gt;In the same way that I won't do my job using &lt;a href="http://jsbin.com"&gt;jsbin&lt;/a&gt; or &lt;a href="http://jsfiddle.net"&gt;jsfiddle&lt;/a&gt; or &lt;a href="http://codepen.io"&gt;codepen&lt;/a&gt; as &lt;em&gt;tools&lt;/em&gt;, Thimble was too simple to address the needs of "everyone". It was great for sitting down to &lt;em&gt;with someone&lt;/em&gt;, and running them through a "zero to hero!" process where they walked away from the experience with the ability to create simple HTML pages for their own, personal content, and a way to put that content on the web (outside of social media postings), but there was no reason to ever use it if you already knew HTML and CSS and JS, and certainly not if you were a developer.&lt;/p&gt;
&lt;h2 id="thimble-got-upgraded-quite-a-bit-"&gt;Thimble got upgraded quite a bit...&lt;/h2&gt;
&lt;p&gt;After a year of Thimble, as well as several other tools being part of the Webmaker offering, we made a decision to give a new technology called &lt;a href="http://nodejs.org"&gt;Node.js&lt;/a&gt; a shot at the Foundation. As a JavaScript server side technology, it offered the benefits of "the same language everywhere", rather than the "JS in the browser, Python on the server" that we'd been using until then, and we quickly learned how to use Node.js and &lt;a href="http://expressjs.com"&gt;Express&lt;/a&gt; (in no small part thanks to colleague and friend jbuck, who did a phenomenal job at giving an hour and a half lecture on how to go from an empty file to a fully functional Express server, following best practices), and in the process rewrote parts of our tools to take advantage of the fact that everything could be done in JavaScript.&lt;/p&gt;
&lt;p&gt;We were able to add features and fix bugs much quicker than before, and we ended up releasing updates almost as fast as we could land bugs. But the Thimble tool stayed relatively samey: yes, there was progressively better support for error reporting in HTML and CSS, and we figured out how to safely allow script execution, so that people could write "real" web pages, but they were still just single pages.&lt;/p&gt;
&lt;p&gt;With the help of &lt;a href="http://thomaspark.co"&gt;Tom Park&lt;/a&gt; from &lt;a href="http://drexel.edu"&gt;Drexel University&lt;/a&gt; we came up with a way to present not just an editor but also a tutorial system, so that using Thimble for educational purposes would be easier, but ultimately it was still just single pages. &lt;/p&gt;
&lt;h2 id="this-was-not-a-tool-that-would-work-for-everyone-"&gt;This was not a tool that would work for everyone.&lt;/h2&gt;
&lt;p&gt;The problem with Thimble, and I'm making it sound like one but for the purpose of Thimble it mostly wasn't, was that it was aimed at an audience that I wasn't part of. In my professional life, I could do everything Thimble did, better, in tools I already had at my disposal on my computers. A desktop code editor and a browser gave me more power than the single flat file concept Thimble operated on, and so I would still use Thimble to teach people, but that was it.&lt;/p&gt;
&lt;p&gt;There were always ideas. "Wouldn't it be great if Thimble was like a real editor, but friendly when it needed to be, while being progressively less 'teaching tool' and more a real development tool as you level up your skills". It &lt;em&gt;would&lt;/em&gt; be great. But we couldn't make that tool. Having the tool work for educational setting was more important than spending time on making it better for a group of people who already had tools at their disposal.&lt;/p&gt;
&lt;p&gt;That makes sense, and that makes what makes the end of this story even more remarkable.&lt;/p&gt;
&lt;h2 id="atom-brackets-and-thimble-oh-my-"&gt;Atom, Brackets, and Thimble; Oh my!&lt;/h2&gt;
&lt;p&gt;Sever-side JavaScript did more than just skyrocket Node.js's popularity: it also allowed for some "chromeless" browser experiments ("chrome" not just being the name of Google's browser, but in the browser world also being the name for every part of the the browser's interface that isn't "the part that shows you the webpages". The term was in already widely used when Google appropriated it) which ended up spawning "pure JS" code editors. Code editors called &lt;a href="https://atom.io"&gt;Atom&lt;/a&gt; and &lt;a href="http://brackets.io"&gt;Brackets&lt;/a&gt; hit the scene, being experiments on using a chromeless browser as a UI framework, and using pure JS as the editor engine. Presented as normal desktop applications, but "powered by the web", there was a lot of love for these new flavours of code editors.&lt;/p&gt;
&lt;p&gt;But: if they ran in a headless browser, there wasn't any real reason why they shouldn't be able to, at least in principal, run in real browsers, online.&lt;/p&gt;
&lt;p&gt;And that's where Dave showed his genius: he took Adobe's "Brackets" editor, and at &lt;a href="http://2013.mozillafestival.org"&gt;MozFest 2013&lt;/a&gt; showed off that it might be possible to put it in the browser, and use it as the code editing part of Thimble, rather than relying on &lt;a href="https://codemirror.net"&gt;codemirror&lt;/a&gt;, so that people would have all the power of a true code editor at their disposal. There was a confluence of technologies that he knew of that could take "making things on the web" to a whole new level, and listening to him describe it, it was the kind of thing I wanted to use.&lt;/p&gt;
&lt;p&gt;Imagine opening a code editor with file management, running a localhost server for proper &lt;code&gt;http://&lt;/code&gt; protocol testing, and a browser with live reloading so you could see the results instantly. As a dev, that sounds a lot like how I do my work already.&lt;/p&gt;
&lt;p&gt;Now imagine not doing those things separately because the browser just does &lt;em&gt;all those things&lt;/em&gt;. A true file system, a true code editor, a true zero-conf HTTP server, true live reloading, all of it, just working. No questions asked. Start it up, and it all just... works.&lt;/p&gt;
&lt;p&gt;To me, that's the future. And that's what Dave was suggesting was possible. If we could put in the time to make it work.&lt;/p&gt;
&lt;h2 id="sometimes-tough-choices-aren-t-fun"&gt;Sometimes, tough choices aren't fun&lt;/h2&gt;
&lt;p&gt;Unfortunately, we didn't have the man hours to make that happen. I really, really loved the idea, but we didn't have the time or the people to stop working on Webmaker, and the Thimble we already had, and instead work on this new thing. This made me sad: it felt like we were focusing on the wrong things by sticking with the Thimble we had. Imagine growing up in a country rife with corruption, and discovering "Norway" is a real thing: while Thimble was still the same tool it had been before, I had seen a glimpse of what it &lt;em&gt;could&lt;/em&gt; be, and how much better that was, and simply knowing that the technology allowed for this amazing thing, devalued the Thimble we worked on for me, instead.&lt;/p&gt;
&lt;p&gt;Fortunately, the Mozilla Foundation is about fostering a "maker attitude" on the web, and promoting digital literacy, not "maintaining a set of tools in perpetuity" and even though Thimble was a tool that helped people express themselves creatively on the web, while learning about how the web works, we were constantly looking at what else we could do, or what we could do instead, to instill those core ideas in people, but not necessarily with the same tools all the time. We came up with Appmaker, which allowed people to make web apps, using web technologies - it was fun, it ended up not working as well as we'd hoped, and so we tried something else. We took the lessons we learned and made a page builder that used templates to allow people to make simple pages that also worked as apps on platforms that supported WebApps (like Android and Firefox OS).&lt;/p&gt;
&lt;p&gt;We looked at the world, and saw a significant part of the world experiencing massive friction between "what the web can do", and "how it was experienced": over a billion people are slowly coming online all over the world right now (even in places like Europe or the US), and the only "internet" they get is through preinstalled apps on their phone; they use Facebook, Twitter, Instagram, but not a browser, that supposedly ubiquitous gateway to the world wide web. The browser is supposed to open up the whole wide world to you, whereas branded apps like Facebook's client are like the CompuServe and AOL of days gone by; you get content presented in one way. Their way.&lt;/p&gt;
&lt;p&gt;This is not a good thing, and so we changed what the app we made could do, transforming it into an &lt;a href="https://beta.webmaker.org"&gt;Android app&lt;/a&gt; (available in the &lt;a href="https://play.google.com/store/apps/details?id=org.mozilla.webmaker"&gt;Play Store&lt;/a&gt; for free) that lets you build simple multi-view websites with text, images, and navigation buttons, to cater to the needs of the people we talked to in the various countries in the world where internet connectivity is starting to boom. It's not done, but the response from people for whom the app makes sense because they've been getting, effectively, locked-in devices has been great.&lt;/p&gt;
&lt;p&gt;At the same time, we deprecated the tools we had been using for the last few years, &lt;a href="https://blog.webmaker.org/whats-next-for-webmaker-tools"&gt;moving some to new homes and retiring others&lt;/a&gt;. And that's where this story comes full circle:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We killed off Thimble. And replaced it with Thimble.&lt;/strong&gt; &lt;/p&gt;
&lt;h2 id="letting-others-do-the-work-you-can-t"&gt;Letting others do the work you can't&lt;/h2&gt;
&lt;p&gt;I'm going to borrow a page out of Dave's book, and profess my enthusiasm for the "let others do the work when you can't do it" doctrine, even though it's a bit of a boomerang: while we were doing all this at the Mozilla Foundation, various people were working on the various technologies that could be glued together as the kind of vision-of-the-future Thimble that Dave had talked about in 2013.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/modeswitch"&gt;Alan Kligman&lt;/a&gt; developed a &lt;a href="https://github.com/filerjs/filer"&gt;POSIX filesystem&lt;/a&gt; that ran on top of &lt;a href="https://en.wikipedia.org/wiki/Indexed_Database_API"&gt;IndexDB&lt;/a&gt;, Dave had been working on getting Brackets itself to &lt;a href="https://github.com/humphd/brackets/tree/bramble"&gt;work in the browser&lt;/a&gt;, the web itself had landed, or had in draft, several new technologies that made data management and communication between processes, documents, and service workers easier, and eventually everything was available for Dave to put together a team of students and see if they could combine everything into the kind of Thimble I had been hoping for since Dave showed me Brackets.&lt;/p&gt;
&lt;p&gt;On Monday, August 31&lt;sup&gt;st&lt;/sup&gt; 2015, that thing officially &lt;a href="http://thimble.mozilla.org"&gt;became real&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-new-thimble-is-a-dream-tool-and-i-love-it"&gt;The new Thimble is a dream tool, and I love it&lt;/h2&gt;
&lt;p&gt;Here's a true thing: the day the new Thimble got announced, I stopped using jsbin, jsfiddle, codepen, and all those other "make a quick html/css/js thing online" tools. Overnight, they had become obsolete. Anything I used them for could be done better in the new Thimble, and where jsbin or codepen let me be creative in a "single thing", the new Thimble lets me be creative without a ceiling. It's simplified the tools necessary to have a live server running with a full file system at my fingertips to "just open thimble.mozilla.org", and I can make things as simple or as complicated as I want.&lt;/p&gt;
&lt;p&gt;It's a true code editor that I can use to make as many files, in as many directories, as I need to properly organize and work on my code. There is undo/redo, but I don't ever have to hit save: my changes are synced by the extremely clever file system that Thimble runs on top of. It has an invisible zero-conf webserver running &lt;em&gt;in the browser&lt;/em&gt; that shows me the result of what I'm writing right next to the content I'm working on. I no longer need a live-server or a &lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt; anymore, it's all &lt;em&gt;just there&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And here's a thing I didn't even think I would say as a developer: thanks to the new Thimble just... working, I don't even &lt;em&gt;need git&lt;/em&gt; anymore.&lt;/p&gt;
&lt;p&gt;No, I don't get revision control (though really, "I don't get revision control &lt;strong&gt;yet&lt;/strong&gt;", because remember that the current &lt;a href="https://thimble.mozilla.org"&gt;https://thimble.mozilla.org&lt;/a&gt; is really just a Minimum Viable Product launch: we've only just begun to see what it can do, and now is that time to start dreaming about fancy features), but I can write my code, publish it to the web for free, and have people be able to see the code I used because they can click a button to fire up thimble with my project loaded up as a forked copy for themselves.&lt;/p&gt;
&lt;p&gt;If I just want to write some Proof of Concept code, or demonstrator code for an article I'm writing, or example code for something I'm explaining to someone online that might be useful later on, I don't need to set up a git repo, with a &lt;code&gt;gh-pages&lt;/code&gt; branch. I can just work in Thimble, hit "publish" (which will update what is online if I'm republishing the same project, with changes) and move my attention elsewhere in the knowledge that my stuff's been updated online for everyone to play with, and my code's safe and sound on a Mozilla server somewhere. And any time I want to dive "deeper", I can just tell Thimble to export my entire filesystem as a .zip file, and then do whatever I feel I need to do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The new Thimble is taking away the need for tools I thought were essential in my life.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I honestly think that's the most impactful statement I can make here. Thimble is solving problems I didn't know I had, and that makes me super happy, and excited about the future.&lt;/p&gt;
&lt;h2 id="so-in-conclusion-"&gt;So, in conclusion:&lt;/h2&gt;
&lt;p&gt;Go try out the new &lt;a href="https://thimble.mozilla.org"&gt;https://thimble.mozilla.org&lt;/a&gt;, and &lt;a href="https://github.com/mozilla/thimble.webmaker.org/issues"&gt;let the team know what you think of it&lt;/a&gt;, and what you can imagine as, in the future, being obvious things you already use it for, that it can't do today.&lt;/p&gt;
&lt;p&gt;Thanks for reading, and I need to be off to write code for my next blog post on writing fonts as source code. I already have Thimble open in another tab with demonstrator code doing amazing things.&lt;/p&gt;
</description>
<category>Mozilla</category>
<category>Thimble</category>
<category>HTML</category>
<category>CSS</category>
<category>JS</category>
<link>http://pomax.github.io/#gh-weblog-1442700129236</link>
<guid>http://pomax.github.io/#gh-weblog-1442700129236</guid>
<pubDate>Sat, 19 Sep 2015 22:02:09 GMT</pubDate>
</item></channel>
</rss>
