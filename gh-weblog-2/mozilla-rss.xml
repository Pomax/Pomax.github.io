<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<atom:link href="http://pomax.github.io/gh-weblog-2/rss.xml" rel="self" type="application/rss+xml" />
<title>Pomax.github.io</title>
<description>My blog on github [Mozilla posts only]</description>
<link>http://pomax.github.io</link>
<lastBuildDate>Wed, 07 Sep 2016 19:08:19 GMT</lastBuildDate>
<pubDate>Wed, 07 Sep 2016 19:08:19 GMT</pubDate>
<ttl>1440</ttl>
<item>
<title> HTTPS, Mixed Content, and the real web... oh my!</title>
<description>&lt;p&gt;We recently fixed something around Mozilla's X-Ray Goggles. A long running problem that caused people headaches and the feeling of lost work, while at the same time doing nothing "wrong", from a technical perspective. This is going to be a story about how modern browsers work, how people use the web, and how those two things... don't always align.&lt;/p&gt;
&lt;h2 id="x-ray-goggles-by-mozilla"&gt;X-Ray Goggles by Mozilla&lt;/h2&gt;
&lt;p&gt;So let's start with X-Ray Goggles: the X-Ray Goggles are &lt;a href="https://goggles.mozilla.org"&gt;a tool&lt;/a&gt; made by &lt;a href="https://mozilla.org"&gt;Mozilla&lt;/a&gt; that lets you "remix" web pages after loading them in your browser. You can go to your favourite place on the web, fire up the goggles (similar to how a professional web developer would open up their dev tools), and then change text, styling, images, and whatever else you might want to change, for as long as you want to change things, and then when you're happy with the result and you want to show your remix to your friends, you can publish that remix so that it has its own URL that you can share.&lt;/p&gt;
&lt;p&gt;However, the X-Ray Goggles use a publishing service that hosts all its content over &lt;code&gt;https&lt;/code&gt;, because we care about secure communication at Mozilla, and using &lt;code&gt;https&lt;/code&gt; is best practice. But in this particular case, it's also kind of bad: large parts of the web still use &lt;code&gt;http&lt;/code&gt;, and even if a website has an &lt;code&gt;https&lt;/code&gt; equivalent, people usually visit the &lt;code&gt;http&lt;/code&gt; version anyway. Unless those websites &lt;em&gt;force&lt;/em&gt; users to the &lt;code&gt;https&lt;/code&gt; version of the site (using a redirect message), then the site they'll be on, and the site they'll be remixing, will use HTTP, and the moment the user publishes their remix with X-Ray Goggles and they get an &lt;code&gt;https&lt;/code&gt; URL back, and then open that URL in their browser....&lt;/p&gt;
&lt;p&gt;well, let's just say "everything looks broken" is not wrong. &lt;/p&gt;
&lt;p&gt;But the reason for this is not because Goggles, or even the browser is doing something wrong - ironically, it's because they're doing something right, and in so doing, what the user wants to do turns out incompatible with what the technology wants them to do. So let's look at what's going on here.&lt;/p&gt;
&lt;h2 id="http-the-basis-upon-which-browsing-is-built"&gt;HTTP, the basis upon which browsing is built&lt;/h2&gt;
&lt;p&gt;If you're a user of the web, no doubt you'll have heard about &lt;code&gt;http&lt;/code&gt; and &lt;code&gt;https&lt;/code&gt;, even if you can't really say what they technically-precisely mean. In simple terms (but without dumbing it down), &lt;a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"&gt;HTTP&lt;/a&gt; is the language that servers and browsers use to negotiate data transfers. The original intention was for those two to talk about HTML code, so that's where the &lt;code&gt;h&lt;/code&gt; in &lt;code&gt;http&lt;/code&gt; comes from (it stands for "hypertext" in both &lt;code&gt;http&lt;/code&gt; and &lt;code&gt;html&lt;/code&gt;), but we're mostly ignoring that these days, and HTTP is used by browsers and servers to negotiate transmission of all sorts of files - web pages, stylesheets, javascript source code, raw data, music, video, images, you name it.&lt;/p&gt;
&lt;p&gt;However, HTTP is a bit like regular English: you can listen in on it. If you go to a bar and sit yourself with a group of people, you can listen to their conversations. The same goes for HTTP: in order for your browser and the server to talk they rely on a chain of other computers connected to the internet to get messages relayed from one ot the other, and any of those computers can listen in on what the browser and server are saying to each other. In an HTTP setting it gets a little stranger even, because any of those computers could look at what the browser or server are saying, &lt;em&gt;replace what is being said with something else&lt;/em&gt; and then forward that on. And you'll have no way of knowing whether that's what happened. It's literally as if the postal service took a letter you sent, opened it, rewrote it, resealed it, and then sent that on. We trust that they won't, and computers connected to the internet trust that other computers don't mess with the communication, but... they can. And sometimes they do.&lt;/p&gt;
&lt;p&gt;And that's pretty scary, actually. You don't want to have to "trust" that your communication isn't read or tampered with, you want to &lt;em&gt;know&lt;/em&gt; that's the case.  &lt;/p&gt;
&lt;h2 id="what-can-we-do-to-fix-that-"&gt;What can we do to fix that?&lt;/h2&gt;
&lt;p&gt;Well, we can use &lt;a href="https://en.wikipedia.org/wiki/HTTPS"&gt;HTTPS&lt;/a&gt;, or "secure HTTP", instead. Now, I need to be very clear here: the term "secure" in "secure HTTP" refers to secure &lt;em&gt;communication&lt;/em&gt;. Rather than talking "in English", the browser and server agree on a secret language that you could listen to, but you won't know what's being said, and so you can't intercept-and-modify the communication willy-nilly without both parties knowing that their communications are being tampered with. However it does &lt;strong&gt;not&lt;/strong&gt; mean that the data the browser and server agree to receive or send is "safe data". It only means that both parties can be sure that what one of them receives is what the other intended to send. All we can be sure of is that no one will have been able to see what got sent, and that no one modified it somewhere along the way without us knowing.&lt;/p&gt;
&lt;p&gt;However, those are &lt;em&gt;big&lt;/em&gt; certainties, so for this reason the internet's been moving more and more towards preferring HTTPS for everything. But not everyone's using HTTPS yet, and so we run into something called the &lt;a href="https://developer.mozilla.org/en-US/docs/Security/Mixed_content"&gt;"Mixed Content"&lt;/a&gt; issue.&lt;/p&gt;
&lt;h2 id="let-s-look-at-an-example-"&gt;Let's look at an example.&lt;/h2&gt;
&lt;p&gt;Imagine I run a web page, much like this one, and I run it on HTTP because I am not aware of the security issues, and my page relies on some external images, and some JavaScript for easy navigation, and maybe an embedded podcast audio file. All of those things are linked as &lt;code&gt;http://......&lt;/code&gt;, and everything worked fine.&lt;/p&gt;
&lt;p&gt;But then I hear about the problems with HTTP and the privacy and security implications sound horrible! So, to make sure my visitors don't have to worry about whether the page they get from my server is my page, or a modified version of my page, I spring into action, I switch my page over to HTTPS; I get a &lt;a href="https://en.wikipedia.org/wiki/Public_key_certificate"&gt;security certificate&lt;/a&gt;, I set everything on my own server up so that it can "talk" in HTTPS, and done!&lt;/p&gt;
&lt;p&gt;Except immediately after switching, my web page is completely broken! The page itself loads, but none of the images show up, and the JavaScript doesn't seem to be working, and that podcast embed is gone! What happened??&lt;/p&gt;
&lt;p&gt;This is a classic case of &lt;strong&gt;mixed-content blocking&lt;/strong&gt;. My web page is being served on HTTPS, so it's indicating that it wants to make sure everything is secure, but the resources I rely on still use HTTP, and now the browser has a problem: it can't trust those resources, because it can't trust that they won't have been inspected or even modified when it requests them, and because the web page that's asking them to be loaded expressed that it cares about secure communication a great deal, the browser can't just fetch those insecure elements, things &lt;em&gt;might&lt;/em&gt; go wrong, and there's no way to tell!&lt;/p&gt;
&lt;p&gt;So it does the only thing it knows is safe: better safe than sorry, and it flat out refuses to even request them, giving you a warning about "mixed content".&lt;/p&gt;
&lt;p&gt;Normally, that's great. It lets people who run websites know that they're relying on potentially insecure third party content in an undeniably clear way, but it gets a bit tricky in two situations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;third party resources that &lt;em&gt;themselves&lt;/em&gt; require other third party resources, and&lt;/li&gt;
&lt;li&gt;embedding and rehosting&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first is things like your web page using a comment thread service: your web page includes a bit of JavaScript from something like &lt;code&gt;www.WeDoCommentsForYou.com&lt;/code&gt; and then that JavaScript then loads content from that site's comment database, for instance &lt;code&gt;comments.WeDoCommentsForYou.com&lt;/code&gt;. If we have a page that uses HTTPS, running on &lt;code&gt;https://ourpage.org&lt;/code&gt; then we can certainly make sure that we load the comment system from &lt;code&gt;https://www.WeDoCommentsForYou.com&lt;/code&gt;, but we don't control the protocol for the URL that the JavaScript we got back uses. If "WeDoCommentsForYou" wrote their script poorly, and they try to load their comments over &lt;code&gt;http://&lt;/code&gt;, then too bad, the browser will block that. Sure, it's a thing that "WeDoCommentsForYou" should fix, but until they do your users can't comment, and that's super annoying.&lt;/p&gt;
&lt;p&gt;The second issue is kind of like the first, but is about entire web pages. Say you want to embed a page; for instance, you're &lt;a href="https://en.wikipedia.org/wiki/Transclusion"&gt;transcluding&lt;/a&gt; an entire wiki page into another wiki page. If the page you're embedding is &lt;code&gt;http&lt;/code&gt; and the page it's embedded on is &lt;code&gt;https&lt;/code&gt;, too bad, that's not going to work. Or, and that brings us to what I really want to talk about, if you remix a page on &lt;code&gt;http&lt;/code&gt;, with &lt;code&gt;http&lt;/code&gt; resources, and host that remix on a site that uses &lt;code&gt;https&lt;/code&gt;, then that's not going to work either...&lt;/p&gt;
&lt;h2 id="back-to-the-x-ray-goggles"&gt;Back to the X-Ray Goggles&lt;/h2&gt;
&lt;p&gt;And that's the problem we were hitting with X-Ray Goggles, too.&lt;/p&gt;
&lt;p&gt;While the browser is doing the same kind of user protection that it does for any other website, in this particular case it's actually a big problem: if a user remixed an HTTP website, then knowing what we know now, &lt;em&gt;obviously&lt;/em&gt; that's not going to work if we try to view it using HTTPS. But that also means that instead of a cool tool that people can use to start learning about how web pages work "on the inside", the result of which they can share with their friends, they have a tool that lets them look at the insides of a web page and then when they try to share their learning, everything breaks.&lt;/p&gt;
&lt;p&gt;That's not cool.&lt;/p&gt;
&lt;p&gt;And so the solution to this problem is based on first meeting the expectations of people, and then educating them on what those expectations actually mean.   &lt;/p&gt;
&lt;h2 id="give-me-https-unless-i-started-on-http"&gt;Give me HTTPS, unless I started on HTTP&lt;/h2&gt;
&lt;p&gt;There are quite a few solutions to the mixed-content problem, and some are better than others. There are some that are downright not nice to other people on the web (like making a full copy of someone's website and then hosting that on Mozilla's servers. That's not okay), or may open people up exploits (like running a proxy server, which runs on HTTPS and can fetch HTTP resources, then send them on as if they were on HTTPS, effectively lying about the security of the communication), so the solution we settled on is, really, the simplest one:&lt;/p&gt;
&lt;p&gt;If you remix an &lt;code&gt;http://...&lt;/code&gt; website, we will give you a URL that starts with &lt;code&gt;http://&lt;/code&gt;, and if you remix an &lt;code&gt;https://&lt;/code&gt; website, we will give you a URL that starts with &lt;code&gt;https://...&lt;/code&gt;. However, we also want you to understand what's going on with the whole "&lt;code&gt;http&lt;/code&gt; vs &lt;code&gt;https&lt;/code&gt;" thing, so when you visit a remix that starts with &lt;code&gt;http://&lt;/code&gt; the remix notice bar at the top of the page also contains a link to the &lt;code&gt;https://&lt;/code&gt; version --same page, just served using HTTPS instead of HTTP-- so that you can see exactly how bad things get if you can't control which protocol gets used for resources on a page.&lt;/p&gt;
&lt;h2 id="security-vs-usability"&gt;Security vs Usability&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.mozilla.org/en-US/security"&gt;Security is everybody's responsibility&lt;/a&gt;, and explaining the risks on the web that are inherent to the technology we use every day is always worth doing. But that doesn't mean we need to lock everything down so "you can't use it, the end, go home, stop using HTTP". That's not how the real world works.&lt;/p&gt;
&lt;p&gt;So we want you to be able to remix your favourite sites, even if they're HTTP, and have a learning/teaching opportunity there around security. Yes, things will look bad when you try to load an HTTP site on HTTPS, but there's a reason for that, and it's important to talk about it.&lt;/p&gt;
&lt;p&gt;And it's equally important to talk about it without making you lose an hour or more of working on your awesome remix.&lt;/p&gt;
</description>
<category>Mozilla</category>
<category>X-Ray Goggles</category>
<category>http</category>
<category>https</category>
<category>browsers</category>
<category>internet</category>
<link>http://pomax.github.io/#gh-weblog-1462301193409</link>
<guid>http://pomax.github.io/#gh-weblog-1462301193409</guid>
<pubDate>Tue, 03 May 2016 18:46:33 GMT</pubDate>
</item></channel>
</rss>
