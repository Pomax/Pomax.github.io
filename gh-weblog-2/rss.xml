<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<atom:link href="http://pomax.github.io/gh-weblog-2/rss.xml" rel="self" type="application/rss+xml" />
<title>Pomax.github.io</title>
<description>My blog on github</description>
<link>http://pomax.github.io</link>
<lastBuildDate>Mon, 06 Dec 2021 18:51:01 GMT</lastBuildDate>
<pubDate>Mon, 06 Dec 2021 18:51:01 GMT</pubDate>
<ttl>1440</ttl>
<item>
<title> Setting up "lots of HTTPS servers" with Node </title>
<description>&lt;p&gt;I'm working on a server-client-thinclient project where there is a single server, running an HTTPS and WS server process, with clients that first connect to the web server "Front door" before being sent on to their own dedicated websocket URL. These clients are just "computer programs" that someone can attach to with their browser, so each client also runs its own little websocket server. At some point, the idea is of course that the server runs on one machine, and clients run on however-many secondary machines, but for testing purposes that makes no sense: the server and clients all run on the same hardware.&lt;/p&gt;
&lt;p&gt;Which means I needed to set up HTTPs/SSL in a way that works for all these things, and thankfully it turns out that Node.js allows you to do this pretty easily. It even has &lt;a href="https://nodejs.org/api/https.html#httpscreateserveroptions-requestlistener"&gt;example code for this&lt;/a&gt; on the API pages for the &lt;code&gt;https&lt;/code&gt; module, which can be used in combination with a Let's Encrypt &lt;a href=""&gt;certbot&lt;/a&gt; key and certificate, and some env vars to regulate whether to use https or not:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import http from "http";
import https from "https";

const useHTTPS = process.env.USE_HTTPS === `true`;
const protocol = useHTTPS ? `https` : `http`;
const domain = process.env.USE_DOMAIN || `localhost`;
const port = parseInt(process.env.PORT) || 8000;

const httpsOptions = {};

if (useHTTPS) {
  const certDir = `/etc/letsencrypt/live`;
  httpsOptions.key = fs.readFileSync(`${certDir}/${domain}/privkey.pem`);
  httpsOptions.cert = fs.readFileSync(`${certDir}/${domain}/fullchain.pem`);
}

function routHandlers(request, response) { 
  // ...
}

const namespace = (useHTTPS ? https : http);
const server = namespace.createServer(useHTTPS ? httpsOptions : undefined, routHandlers);

server.listen(port, () =&amp;gt; {
  console.log(`Server is listening on ${protocl}//${domain}:${port}`);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then you just make sure every single server uses this approach.&lt;/p&gt;
</description>
<category>Node</category>
<category>HTTPS</category>
<category>server</category>
<link>http://pomax.github.io/#gh-weblog-1638815860591</link>
<guid>http://pomax.github.io/#gh-weblog-1638815860591</guid>
<pubDate>Mon, 06 Dec 2021 18:37:40 GMT</pubDate>
</item>
<item>
<title> If your software still relies on Python 2.7, your software is bad and you should feel bad.</title>
<description>&lt;p&gt;If that statement made you think you should tell me I'm wrong, then allow me to elaborate, because I tweeted this a while back and got some really weird responses that demonstrate &lt;em&gt;many&lt;/em&gt; folks don't understand what's wrong here, and that in itself is something worth fixing.&lt;/p&gt;
&lt;p&gt;Let's start with a bit of tech debt: you need to write a program, which language do you use? Cool, good choice, love it, totally the right call, so: what's your major version upgrade plan? Because the title statement isn't just about Python 2.7, Python 2.7 is just the latest example in a long and never-ending series of programming language versions that either have, are in the process of, or will become, obsolete and almost guaranteed security liabilities.&lt;/p&gt;
&lt;p&gt;For example, let's look at some statements that are exactly the same as the title, but that almost no one's going to get upset about:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your software still relies on PHP 4 in 2021, your software is bad and you should feel bad.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I mean... obviously. If you're still writing new PHP 4 code, or you're refusing to uplift software that was originally written in PHP 4, instead just keeping on developing it in PHP 4, now you're just an intentional bad actor. The only way people can run your code is by installing software that we, which includes you, &lt;em&gt;know&lt;/em&gt; is a giant security exploit.&lt;/p&gt;
&lt;p&gt;Of course there will be code that was originally written for PHP 4 that did something incredibly useful back in the early 2000's, but no amount of utility can justify installing PHP 4 in the early 2020's.&lt;/p&gt;
&lt;p&gt;How about another one?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your software still relies on Node 0.10 in 2021, your software is bad and you should feel bad.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I mean... have you looked at the list of CVEs for Node 0.10?  If you're still writing Node 0.10 code, or you're refusing to uplift software that was originally written in Node 0.10, instead just keeping on developing it in Node 0.10, then yeah, your software is bad and you should absolutely feel bad. If you're still working on it, why the hell are you not targeting the older of the two LTS versions of Node?&lt;/p&gt;
&lt;p&gt;Let's do one more.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your software still relies on Java 1.4 in 2021, your software is bad and you should feel bad.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You get the point by now. Sure, there is code that got &lt;em&gt;released when Java 1.4 was current&lt;/em&gt; and did great things but if that code is still being maintained or worked on (not, "if that code is still being used", but if that code is still actively maintained, and has new releases pushed out, requiring Java 1.4) then that code should have been uplifted &lt;em&gt;several times&lt;/em&gt; over the last two decades.&lt;/p&gt;
&lt;h2 id="so-why-is-python-such-a-touchy-subject-"&gt;So why is Python such a touchy subject?&lt;/h2&gt;
&lt;p&gt;A lot of people are locked into it, whether they want to or not. And most don't want to.&lt;/p&gt;
&lt;p&gt;That's not their fault. A lot of software was originally written in 2.7, and again that's fine. But, a lot of companies still haven't uplifted their 2.7 code to v3 now that 2.7 has been dead for over a year, and that &lt;em&gt;&lt;strong&gt;is&lt;/strong&gt;&lt;/em&gt; their fault, and that &lt;em&gt;&lt;strong&gt;is&lt;/strong&gt;&lt;/em&gt; something they need to feel bad about, and address.&lt;/p&gt;
&lt;p&gt;How we got here is easy: Python 2.7 was around for a very, &lt;em&gt;very&lt;/em&gt; long time. Much too long, in fact, and for the longest of that long time, there wasn't even an end-of-life date for it. During the lifetime of 2.7, the new Python 3.0 got released. And then 3.1 got released as well... and then 3.2... and 3.3.... and 3.4... and 3.5... and 3.6... and 3.7... and 3.8... and 3.9... For an entire &lt;em&gt;decade&lt;/em&gt; of 3.x updates, 2.7 was just as viable a choice, despite being objectively worse in pretty much every way. So thanks to the fact that there was already a ton of 2.7 code being used when 3.0 came out, making people prefer "the old version" because you already needed to have 2.7 installed for the majority of the python code you needed anyway, and installing 3.x on the same machine was actually a royal pain in the backside, people kept developing new codebases in 2.7 and that was unfortunate and definitely a vicious cycle, but entirely understandable.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/python/devguide/pull/344"&gt;That changed in 2018&lt;/a&gt;, when a real end-of-life date for 2.7 was decided: as of January 1st 2020, python 2.7 would be dead. As in: properly dead. The same kind dead as PHP 4, or Node 0.10, or Java 1.4: any security hole, any exploit, any vulnerability that 2.7 still had is forever part of 2.7, because 2.7 has reached end-of-life. In 2020, we said goodbye to Python 2.7 - it was a glorious run, but it had to go, and it's good that it's gone. Long live Python 3.x, but with EOL dates for each version. Hurray!&lt;/p&gt;
&lt;p&gt;Now, practically, 2.7 didn't &lt;em&gt;actually&lt;/em&gt; die until April 2020, but throughout 2018 and 2019, people knew 2.7 would be gone soon, but the Python folks are &lt;em&gt;good people&lt;/em&gt;, and they actually created tools to help everyone uplift their code from v2 to v3. The &lt;a href="https://docs.python.org/3/library/2to3.html"&gt;2to3&lt;/a&gt; package is fantastic, and for a great many people, it's all they need. &lt;/p&gt;
&lt;p&gt;Now it's April 2021, and we reach the original premise:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your software still relies on Python 2.7, your software is bad and you should feel bad.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note what this &lt;em&gt;doesn't&lt;/em&gt; say: it doesn't say that all Python 2.7 software ever written is bad, Python 2.7 code written in 2004 that does a thing no other code does had a damn good reason to exist, but it has zero reason to &lt;em&gt;still be maintained as a 2.7 code base&lt;/em&gt; because 2.7 is gone. Make your peace with that and move to 3.x&lt;/p&gt;
&lt;p&gt;It also doesn't say that &lt;em&gt;users&lt;/em&gt; should feel bad if their only choice is an old Python 2.7 piece of code. If that software you rely on is written in Python 2.7, and the maintainers long since abandoned it, then yeah that's your only choice and as a person you are perfectly capable of deciding whether that old software is worth the security liability of python 2.7. More often than not, it will be.&lt;/p&gt;
&lt;p&gt;What it &lt;em&gt;does&lt;/em&gt; say is that if you are writing python code today, whether that's new code, or maintaining a project that started over a decade ago, and you intend for others to use that code, and you use Python 2.7, you are a bad programmer and you need to stop what you're doing. Step back, take a deep breath, and uplift your code to a version of Python that is still supported (which realistically means first uplifting to v3, and then going through decade of v3 minor versions to make sure you catch any problems caused by v3 getting better and better), while archiving your 2.7 branch so that folks who absolutely still need it can still get it.&lt;/p&gt;
&lt;h2 id="in-conclusion"&gt;In conclusion&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If your software still relies on Python 2.7&lt;/strong&gt; , meaning that in 2021, your software that you still work on with the intention of having others make use of it, then&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;your software is bad&lt;/strong&gt; because it forces people into using dead technology that has known security exploits, and&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;you should feel bad&lt;/strong&gt; and you should address that.&lt;/p&gt;
&lt;p&gt;Go archive your 2.7 release as the last 2.7 release you'll ever do, run 2to3 on your code, and start a new release set for 3.x because that's the safe version of Python that people should be using these days.&lt;/p&gt;
&lt;p&gt;Not PHP 4. Or Node 0.10. Or Java 1.4. Or Python 2.7&lt;/p&gt;
</description>
<category>python</category>
<category>programming</category>
<link>http://pomax.github.io/#gh-weblog-1617908788691</link>
<guid>http://pomax.github.io/#gh-weblog-1617908788691</guid>
<pubDate>Thu, 08 Apr 2021 19:06:28 GMT</pubDate>
</item>
<item>
<title> bash_profile for Windows' CMD </title>
<description>&lt;p&gt;Some folks love powershell. I am not one of those people: powershell breaks on standard command chaining using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, making it decidedly useless for the work I do on the daily. Instead I use &lt;code&gt;cmd&lt;/code&gt; for everything terminal-related. No "git bash", no "console2", just plain &lt;code&gt;cmd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And did you know that &lt;code&gt;cmd&lt;/code&gt; has autorun functionality just like &lt;code&gt;bash&lt;/code&gt; does? It doesn't use a &lt;code&gt;.bash_profile&lt;/code&gt; (obviously) but it does let you specify what should run any time you start &lt;code&gt;cmd&lt;/code&gt; by looking at two special registry keys mentioned in &lt;a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmd"&gt;the documentation for cmd&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Cmd.exe looks for the following registry subkeys:

- HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor\AutoRun (REG_SZ)
- HKEY_CURRENT_USER\Software\Microsoft\Command Processor\AutoRun (REG_EXPAND_SZ)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, run &lt;code&gt;regedit&lt;/code&gt; and find your way to &lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft&lt;/code&gt;, create the &lt;code&gt;Command Processor&lt;/code&gt; key if it doesn't exist (which it won't if you never used it before), and then create an expandable string value called &lt;code&gt;AutoRun&lt;/code&gt; (paying attention to correct capitalization) and assign it the value &lt;code&gt;%USERPROFILE%\cmd-autorun.bat&lt;/code&gt;, then create a file called &lt;code&gt;cmd-autorun.bat&lt;/code&gt; in your own Windows user directory.&lt;/p&gt;
&lt;p&gt;Done: you now have the equivalent of a &lt;code&gt;.bash_profile&lt;/code&gt; for &lt;code&gt;cmd&lt;/code&gt; that will run only for your user account (as it should be) any time you (or anything else) starts up &lt;code&gt;cmd&lt;/code&gt;.&lt;/p&gt;
</description>
<category>windows</category>
<category>cmd</category>
<category>bash</category>
<category>bash_profile</category>
<category>autorun</category>
<link>http://pomax.github.io/#gh-weblog-1616607431740</link>
<guid>http://pomax.github.io/#gh-weblog-1616607431740</guid>
<pubDate>Wed, 24 Mar 2021 17:37:11 GMT</pubDate>
</item>
<item>
<title>My macbook keeps crashing after putting in an NVMe SSD!</title>
<description>&lt;p&gt;Yours and everyone else's: there are two things you &lt;em&gt;need&lt;/em&gt; to do.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Reset your mac's nvram, which is a hardware cache that includes SSD hardware information. If you don't reset it, macos is going to apply the old SSD's information to your new SSD, and you're going to have a bad time. Restart macos while holding &lt;code&gt;Command+Option+P+R&lt;/code&gt; (all four keys at the same time) until you hear the mac chime. You won't &lt;em&gt;see&lt;/em&gt; anything, it'll just be a black screen, not an apple logo, so if you don't hear that chime: boot into macos regulary, make sure your audio's not muted, and retry.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Disable macos' drive standby, because your SSD is almost certainly incompatible with the apple hardware instructions. After booting into macos (after resetting the nvram) open a terminal and run:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ sudo pmset -a standby 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You're done, your new (presumably much bigger) NVMe SSD will work just fine now,  and your mac will no longer crash at random&lt;/p&gt;
</description>
<category>macos</category>
<category>nvme</category>
<category>ssd</category>
<category>nvram</category>
<category>standy</category>
<link>http://pomax.github.io/#gh-weblog-1614461875757</link>
<guid>http://pomax.github.io/#gh-weblog-1614461875757</guid>
<pubDate>Sat, 27 Feb 2021 21:37:55 GMT</pubDate>
</item>
<item>
<title>Creating an Arduino-based inline MIDI recorder</title>
<description>&lt;p&gt;If you’ve ever used audio software on the computer, you probably know that MIDI exists: a signalling protocol that allows controllers to control virtual instruments like synths. It’s also the protocol used by real audio hardware to talk to each, and you can think of it as the language in which, rather than communicating a fluctuating voltage signal or series of discrete sample values, devices talk about what is being done on them (“A4 got pressed”, “F4 got released”, “the mod wheel moved down”, etc).&lt;/p&gt;
&lt;p&gt;As such, there are two ways to record digital instruments (real or virtual): you can record the sound they’re making, or you can record the MIDI events that cause them to make those sounds, and that’s where things get interesting.&lt;/p&gt;
&lt;p&gt;There are many, many ways to record audio, from microphones to line monitors to audio interfaces, on dedicated hardware, computers, phones, etc. etc., but there aren’t all that many ways to record MIDI events. Essentially: unless you’re running software that monitors MIDI events, there just isn’t really any way to record MIDI. So I set out to change that: in the same way that you can just hook up an audio field recorder (like a Tascam DR-05) to sit between an audio-out on something that generates audio and an audio-in on something that should be listening to that audio, writing that to an SD card as .wav or .mp3 or the like, I built a MIDI “field recorder” that you plug in between your MIDI-out and some MIDI-in, indiscriminately recording every MIDI event that gets sent over the wire to an SD card as a .mid file.&lt;/p&gt;
&lt;p&gt;You’d think this would be something that already exists as a product you can just buy (even if at probably quite the markup because it’s made of “powder-coated extruded aluminium” with “audiophile quality” components, but still). Amazingly, it is not. There’s just nothing.&lt;/p&gt;
&lt;p&gt;So: if you want a MIDI recorder, you’ll have to build one… and if you want to build one, &lt;a href="https://pomax.github.io/arduino-midi-recorder/"&gt;this tutorial&lt;/a&gt; might be useful to you!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/Pomax/arduino-midi-recorder/master/banner.jpg" alt=""&gt;&lt;/p&gt;
</description>
<category>Arduino</category>
<category>MIDI</category>
<category>Recording</category>
<link>http://pomax.github.io/#gh-weblog-1611618580829</link>
<guid>http://pomax.github.io/#gh-weblog-1611618580829</guid>
<pubDate>Mon, 25 Jan 2021 23:49:40 GMT</pubDate>
</item>
<item>
<title>Dragging .mid files into FL Studio</title>
<description>&lt;p&gt;There are a few ways to drag midi files into &lt;a href="https://www.image-line.com/"&gt;FL Studio&lt;/a&gt;, but the best way is also not documented:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Drag your .mid onto the program &lt;em&gt;background&lt;/em&gt;, so &lt;strong&gt;not&lt;/strong&gt; onto the channel rack, and &lt;strong&gt;not&lt;/strong&gt; into a pattern, then&lt;/li&gt;
&lt;li&gt;say "no" when asked to save the current project,&lt;/li&gt;
&lt;li&gt;make sure "start new project" is unchecked in the MIDI import dialog, and then&lt;/li&gt;
&lt;li&gt;hit accept: congrats, you're done.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unlike the &lt;a href="https://www.image-line.com/fl-studio-learning/fl-studio-online-manual/html/automation_midiimport.htm"&gt;officially documented way&lt;/a&gt;, which splits up MIDI events into separate channels for no reason whatsoever, this method preserves the data and will import everything to the same channel if the .mid file had everything in the same channel. No need for the incredibly tedious "importing CC automation one CC at a time" workflow, just drag, drop, click, click, click, done: you now have a new channel rack entry that can play the midi data, and an associated pattern that you can place wherever you want in the arrangement window with all your midi data.&lt;/p&gt;
</description>
<category>MIDI</category>
<category>FL Studio</category>
<link>http://pomax.github.io/#gh-weblog-1609525953375</link>
<guid>http://pomax.github.io/#gh-weblog-1609525953375</guid>
<pubDate>Fri, 01 Jan 2021 18:32:33 GMT</pubDate>
</item>
<item>
<title>Installing Windows 7 in late 2020</title>
<description>&lt;p&gt;I needed to install Windows 7 on an old Shuttle computer, for which win10 would be too much of a constant load on the system (it's a completely passive system, and a constant 30% load on the cpu is very much not appreciated), and ran into an interesting problem. For the most part, installation is fine: get the official ISO from Microsoft on their &lt;a href="https://www.microsoft.com/en-ca/software-download/windows7"&gt;dedicated software download page&lt;/a&gt;, which requires supplying your windows 7 key (conveniently a sticker on the inside of the Shuttle case. Inconveniently, a sticker you can't remove and put in an organizer that has all your software keys).&lt;/p&gt;
&lt;p&gt;Burn the ISO to a USB stick, which can thankfully be any old 4GB stick because windows 7, unlike 10, never grew past 3.5GB as base install (I use &lt;a href="https://sourceforge.net/projects/win32diskimager/"&gt;Win32 Disk Imager&lt;/a&gt;, which can "burn" &lt;code&gt;.iso&lt;/code&gt; files just fine, but you do need to file type filter for all file types, because it'll filter just for &lt;code&gt;.img&lt;/code&gt; files), then boot off of said USB stick.&lt;/p&gt;
&lt;p&gt;Once up and running, you start Windows Update (start → "all programs" → windows update) and then you go through the "install updates, reboot, install more updates, reboot, etc. etc." motions. Until you hit update &lt;code&gt;kb4516065&lt;/code&gt;, which will fail with an error code 80092004 that has no article to explain what it means, and seemingly has no way to get past.&lt;/p&gt;
&lt;p&gt;Thankfully, the advice in &lt;a href="https://answers.microsoft.com/en-us/windows/forum/windows_7-update/kb4516065-installation-fails-with-error-80092004/ef9994ee-7820-436e-b18f-001ae53edf28"&gt;this post&lt;/a&gt; works: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;download and manually install &lt;a href="https://www.catalog.update.microsoft.com/search.aspx?q=kb4490628"&gt;kb4490628&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;then download and manually install &lt;a href="https://www.catalog.update.microsoft.com/Search.aspx?q=kb4516065"&gt;kb4516065&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once done, windows update can get back to the "install updates, reboot, install more updates, reboot, etc" dance and all is well.&lt;/p&gt;
&lt;p&gt;I mean, except for the part where you'll never receive security etc updates ever again, so once you're done installing everything, you &lt;em&gt;prooobably&lt;/em&gt; want to either air gap or network-restrict the machine so it can't reach, or be reached from, the internet. Which is exactly what I need (it just needs to accept audio feeds from a set of microphones that it can then forward on over LAN, no internet required) so happens to be fine for my use-case.&lt;/p&gt;
</description>

<link>http://pomax.github.io/#gh-weblog-1603899270641</link>
<guid>http://pomax.github.io/#gh-weblog-1603899270641</guid>
<pubDate>Wed, 28 Oct 2020 15:34:30 GMT</pubDate>
</item>
<item>
<title>Automating the build process of the Primer on Bezier Curves</title>
<description>&lt;p&gt;If you're reading this, you probably know my &lt;a href="https://pomax.github.io/bezierinfo/"&gt;Primer on Bézier Curves&lt;/a&gt;, but what you probably don't know is that until today this build process for this was entirely manual. A code change would require landing the code, then checking out &lt;code&gt;master&lt;/code&gt;, running &lt;code&gt;npm run build&lt;/code&gt;, then pushing the rebuilt files back up to &lt;code&gt;master&lt;/code&gt;, and then doing the same for the &lt;code&gt;bezierinfo&lt;/code&gt; repo, which exists in parallel.&lt;/p&gt;
&lt;p&gt;Most of that work has now been automated with &lt;a href="https://github.com/features/actions"&gt;Github actions&lt;/a&gt;. Whenever content or build related files get updated on the master branch, Github will now cause &lt;a href="https://github.com/Pomax/BezierInfo-2/blob/master/.github/workflows/ci.yml"&gt;ci.yml&lt;/a&gt; to kick in, which runs through the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;check out &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;a href="https://www.tug.org/texlive"&gt;TeX Live&lt;/a&gt;, which installs all the TeX features that the primer relies on&lt;/li&gt;
&lt;li&gt;Pulls the &lt;code&gt;pdf2svg&lt;/code&gt; source code from the web and builds it&lt;/li&gt;
&lt;li&gt;Grabs &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; and uses it to install the latest version of Node and runs &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Runs &lt;code&gt;npm run build&lt;/code&gt;, which runs &lt;a href="https://github.com/Pomax/BezierInfo-2/blob/master/webpack.config.js"&gt;webpack several times&lt;/a&gt;, once for each locale, which:&lt;ul&gt;
&lt;li&gt;preprocesses the souce code to &lt;a href="https://github.com/Pomax/BezierInfo-2/blob/master/lib/latex-loader.js"&gt;replace LaTeX code with &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; tags&lt;/a&gt; by literally wrapping it in a LaTeX document and then calling &lt;a href="https://en.wikipedia.org/wiki/XeTeX"&gt;xelatex&lt;/a&gt; on that source,&lt;/li&gt;
&lt;li&gt;crops the resulting PDF, then&lt;/li&gt;
&lt;li&gt;converts that crop to an SVG image on disk, then&lt;/li&gt;
&lt;li&gt;reads in the SVG image's dimensions so the original source can be replaced with &lt;code&gt;&amp;lt;img src="..." width="..." height="..."&amp;gt;&lt;/code&gt;, ensuring the document doesn't constantly reflow as images load in, then&lt;/li&gt;
&lt;li&gt;wraps all example code such that references to the graphics API, which cannot possibly work in isolation, actually point to the right thing, and then finally,&lt;/li&gt;
&lt;li&gt;runs the result through babel and bundles it up as &lt;code&gt;article.js&lt;/code&gt; with its own &lt;code&gt;index.html&lt;/code&gt; (because each locale needs an appropriate&lt;code&gt;lang=...&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Commits and pushes the result back up to &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So the only thing I still need to do manually now is sync from the &lt;code&gt;BezierInfo-2&lt;/code&gt; dev repo to the main &lt;code&gt;bezierinfo&lt;/code&gt; repo, which feels sensible: you don't want to indiscriminately push your dev code to prod without review.&lt;/p&gt;
&lt;p&gt;But this sure makes an involved process a heck of a lot easier.&lt;/p&gt;
&lt;p&gt;I guess that means I should also add a Github action to automatically build the ToC for this blog site anytime I add a new entry... because that's also a manual step right now... and I can probably offload the RSS generation rather than doing that in-browser every time.&lt;/p&gt;
</description>
<category>Bezier</category>
<category>Github</category>
<category>Automation</category>
<link>http://pomax.github.io/#gh-weblog-1591576580138</link>
<guid>http://pomax.github.io/#gh-weblog-1591576580138</guid>
<pubDate>Mon, 08 Jun 2020 00:36:20 GMT</pubDate>
</item>
<item>
<title> Fixing Windows 10's "error code 19"</title>
<description>&lt;p&gt;In a bizarre happenstance, I rebooted my Windows 10 workstation after doing nothing special in particular, and all my USB devices stopped working. Or rather, they worked fine, until Windows 10 got control of the system.  Not having a keyboard or mouse, I had to remote into my workstation from a different computer, but that revealed that for some reason, the "Intel USB 3.0 eXtensible Host Controller Driver" didn't work. And not because the driver was bad, but because a registry setting was wrong:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Windows cannot start this hardware device because its configuration information (in the registry) is incomplete or damaged. (Code 19)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, if you Google for this error, you will get a million click-bait articles, and a handful of real posts that tell you to uninstall the device in Device Manager, and then reboot - and of course, that does nothing.&lt;/p&gt;
&lt;p&gt;Then some of them tell you to regedit your way to success by deleting the &lt;code&gt;LowerFilters&lt;/code&gt; and &lt;code&gt;UpperFilters&lt;/code&gt; keys in the HKEY_LOCAL_MACHINE &amp;gt;  System &amp;gt; CurrentControlSet &amp;gt; Control &amp;gt; Class &amp;gt; ... entry, which is invariable for CD-ROM or DVD drives, and that of course does nothing because those are not your problem.&lt;/p&gt;
&lt;p&gt;Instead, you need to open HKEY_LOCAL_MACHINE &amp;gt;  System &amp;gt; CurrentControlSet &amp;gt; Control &amp;gt; Class, and then simply step through the entries until you find the &lt;code&gt;USB&lt;/code&gt; entry. In my case, that was &lt;code&gt;{36fc9e60-c465-11cf-8056-444553540000}&lt;/code&gt; rather than one of the million &lt;code&gt;{4d36e9xx-e325-11ce-bfc1-xxxxxx}&lt;/code&gt; keys that people tell you to use.&lt;/p&gt;
&lt;p&gt;Look at the &lt;code&gt;LowerFilters&lt;/code&gt; and &lt;code&gt;UpperFilters&lt;/code&gt; values. Are there any? Delete them. Do they have the wrong case, like &lt;code&gt;UPPERFILTERS&lt;/code&gt;? Delete them. Just delete them. Then in Device manager, uninstall the host controller and then scan for new hardware.&lt;/p&gt;
&lt;p&gt;Presto, you fixed the problem.&lt;/p&gt;
&lt;p&gt;And I can only pray that you allowed Remote Desktop connections into your machine, because without that, it's going to be incredibly hard to solve this problem without buying a PS/2 keyboard and/or mouse.  "But I don't have a user password" I hear you say: fret not, &lt;a href="https://superuser.com/questions/106917/remote-desktop-without-a-password"&gt;there's a policy edit&lt;/a&gt; for that. "But I have Windows 10 Home Edition" I hear you say...  well then I got nothing for you. I don't even know why that version exists. Upgrade to Pro, then fix the problem, I guess.  And I really do, because I have no way of testing that.&lt;/p&gt;
&lt;p&gt;If you use Windows and you're reading this, you should be on Pro. In both senses of the word "should".&lt;/p&gt;
</description>
<category>Windows</category>
<category>Error</category>
<category>Code 19</category>
<category>RegEdit</category>
<category>USB</category>
<link>http://pomax.github.io/#gh-weblog-1586905169363</link>
<guid>http://pomax.github.io/#gh-weblog-1586905169363</guid>
<pubDate>Tue, 14 Apr 2020 22:59:29 GMT</pubDate>
</item>
<item>
<title> Speeding up Lightroom catalog work by not using Lightroom</title>
<description>&lt;p&gt;&lt;a href="https://www.adobe.com/products/photoshop-lightroom-classic.html"&gt;Adobe Lightroom&lt;/a&gt; catalogs are &lt;a href="https://sqlite.org/index.html"&gt;SQLite3&lt;/a&gt; files (just with the &lt;code&gt;.lrcat&lt;/code&gt; extension rather than the typical &lt;code&gt;.sqlite&lt;/code&gt; or &lt;code&gt;.db&lt;/code&gt; extensions) and some things that take Lightroom effectively forever can be performed in milliseconds if you're willing to ignore Lightroom entirely and just load the catalog in SQLite3, probably using &lt;a href="https://sqlitebrowser.org"&gt;an administrative GUI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For instance, if you want the list of all filenames for images that haven't been tagged yet, good luck making Lightroom do that. Even with the &lt;a href="http://lightroomsolutions.com/a-quick-list-of-filenames/"&gt;user script that some people will tell you to use&lt;/a&gt;, actually getting Lightroom to perform this for even a low number of photos in a several thousand photo catalog will take excruciatingly long, whereas the SQLite3 query will probably take less than a second:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
  originalFilename as filename
FROM
  Adobe_images as i,
  AgLibraryFile as f
WHERE
  i.rootFile = f.id_local
AND
  i.id_local NOT IN (
    SELECT DISTINCT(image) as id_local
    FROM AgLibraryKeywordImage
  )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Load your catalog, run that query, and done.&lt;/p&gt;
&lt;p&gt;There is in fact a lot more that you can do this way, but you might need to do some table hunting: my lightroom catalog has 112 tables, and finding which table houses what information is "half the fun" (read: quite the chore). However, once you've found where to find what, writing a query that just pulls the data you need in exactly the format you need takes very little time, and the amount of time you save for subsequent occasions you need to do the same thing is incredible.&lt;/p&gt;
&lt;p&gt;Best of all, you can automate your sqlite. Python, Node, Ruby, all common modern scripting languages can with a sqlite connector, so you can just write a script that loads in the catalog file, runs your query, writes the result to file (or even updates the catalog directly) and all you have to do is execute your script.  And really, that's what we wish Adobe just offered out of the box.&lt;/p&gt;
&lt;p&gt;They don't, but because they use Sqlite3, "they do".&lt;/p&gt;
</description>
<category>Adobe</category>
<category>Lightroom</category>
<category>SQLite</category>
<category>SQLite3</category>
<link>http://pomax.github.io/#gh-weblog-1568672424870</link>
<guid>http://pomax.github.io/#gh-weblog-1568672424870</guid>
<pubDate>Mon, 16 Sep 2019 22:20:24 GMT</pubDate>
</item></channel>
</rss>
